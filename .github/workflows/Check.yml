name: Check

on:
  workflow_dispatch:
  pull_request:
    branches: ["master"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format

      - name: Restore, build, and annotate errors
        continue-on-error: true
        run: |
          build_failed=false

          mapfile -t projects < <(find . -name '*.csproj')

          for project in "${projects[@]}"; do
            echo "üîπ Restoring: $project"
            dotnet restore "$project"

            echo "üîπ Building: $project"
            build_output=$(dotnet build "$project" --no-restore  || true)

            if [[ $build_output == *"error"* ]]; then
              build_failed=true
            fi

            echo "$build_output"| awk '!seen[$0]++' | while read -r line; do
              if [[ "$line" =~ ^(.*[a-zA-Z0-9_/.]+)\(([0-9]+),([0-9]+)\):\ error\ (.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_number="${BASH_REMATCH[2]}"
                column_number="${BASH_REMATCH[3]}"
                error_message="${BASH_REMATCH[4]}"
                echo "::error file=$file,line=$line_number,col=$column_number::$error_message"
              fi
            done
          done

          echo "build_failed=$build_failed" >> $GITHUB_ENV
          echo "$build_failed"

      - name: Fail if build errors found
        if: env.build_failed == 'true'
        run: |
          echo "‚ùå Build failed due to errors."
          exit 1

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      - name: Check code style
        run: dotnet format --verify-no-changes --severity error
        env:
          PATH: $PATH:/home/runner/.dotnet/tools
